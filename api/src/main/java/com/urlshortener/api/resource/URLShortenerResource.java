package com.urlshortener.api.resource;

import com.urlshortener.api.dto.CreateShortURLRequest;
import com.urlshortener.api.dto.CreateShortURLResponse;
import com.urlshortener.api.dto.ShortURLStatisticsResponse;
import com.urlshortener.api.model.ShortURL;
import com.urlshortener.api.service.ShortenerService;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.time.Instant;

@RestController
public class URLShortenerResource {

    private ShortenerService shortenerService;

    @Autowired
    public URLShortenerResource(ShortenerService shortenerService) {
        this.shortenerService = shortenerService;
    }

    /**
     * Creates a new short URL based on keys generated by key generator service (offline). In success case API will return
     * a shorted URL and 201 status code.
     *
     * @param createShortURLRequest
     * @return CreateShortURLResponse shorted url
     */
    @ApiOperation(value = "Creates a new URL", nickname = "createShortURL", notes = "Creates a new short URL")
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "URL Created"),
            @ApiResponse(code = 400, message = "Invalid input, object invalid"),
            @ApiResponse(code = 404, message = "The key was not found") })
    @RequestMapping(value = "/shortener", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
    public ResponseEntity<CreateShortURLResponse> createShortURL(@ApiParam(value = "URL to be shortened.")
                                               @Validated @RequestBody CreateShortURLRequest createShortURLRequest) {

        ShortURL newShortedURL = shortenerService.createNewShortedURL(new ShortURL(Instant.now(), createShortURLRequest.getUrl(), 0L));
        String location = shortenerService.mountShortenedUrl(newShortedURL.getId());
        return ResponseEntity
                .status(HttpStatus.CREATED)
                .header(HttpHeaders.LOCATION, location)
                .body(new CreateShortURLResponse(location));
    }

    /**
     * Redirect a short URL to original URL.
     *
     * @param key short URL unique key.
     */
    @ApiOperation(value = "Redirect a short URL to original URL", nickname = "redirectURL", notes = "Redirect a short URL to original URL")
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "URL Created"),
            @ApiResponse(code = 301, message = "Redirect to original URL"),
            @ApiResponse(code = 404, message = "The key was not found") })
    @RequestMapping(value = "/shortener/{key}", method = RequestMethod.GET)
    public ResponseEntity<Void> redirectURL(@ApiParam(value = "Short URL key", required=true)
                                            @PathVariable("key") String key) {
        return ResponseEntity
                .status(HttpStatus.MOVED_PERMANENTLY)
                .header(HttpHeaders.LOCATION, shortenerService.getShortUrl(key).getOriginalURL())
                .build();
    }

    /**
     * Get statistics for a shortened URL.
     *
     * @param key short URL unique key.
     */
    @ApiOperation(value = "Get statistics for a shortened URL", nickname = "statistics", notes = "Get statistics for a shortened URL.")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "URL statistics"),
            @ApiResponse(code = 404, message = "The key was not found") })
    @RequestMapping(value = "/shortener/{key}/statistics", method = RequestMethod.GET)
    public ResponseEntity<ShortURLStatisticsResponse> statistics(@ApiParam(value = "Short URL key", required=true)
                                            @PathVariable("key") String key) {
        ShortURL shortUrlData = shortenerService.getShortUrlData(key);
        return ResponseEntity
                .status(HttpStatus.OK)
                .body(new ShortURLStatisticsResponse(shortenerService.mountShortenedUrl(shortUrlData.getId()),
                        shortUrlData.getOriginalURL(),
                        shortUrlData.getCreationDate(),
                        shortUrlData.getHits(),
                        shortUrlData.getLastHit()));
    }


}
